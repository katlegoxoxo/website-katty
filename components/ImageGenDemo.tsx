import React, { useState } from 'react';
import { GoogleGenAI } from '@google/genai';
import { motion } from 'framer-motion';

const ImageGenDemo: React.FC = () => {
    const [prompt, setPrompt] = useState('A cute, fluffy robot cat, digital art');
    const [generatedImage, setGeneratedImage] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const handleGenerate = async () => {
        if (!prompt) {
            setError('Please enter a prompt.');
            return;
        }
        setIsLoading(true);
        setError(null);
        setGeneratedImage(null);

        try {
            const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
            const response = await ai.models.generateImages({
                model: 'imagen-4.0-generate-001',
                prompt: prompt,
                config: {
                    numberOfImages: 1,
                    outputMimeType: 'image/png',
                    aspectRatio: '1:1',
                },
            });

            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            const imageUrl = `data:image/png;base64,${base64ImageBytes}`;
            setGeneratedImage(imageUrl);
        } catch (e) {
            console.error(e);
            setError('Failed to generate image. Please check your prompt or try again.');
        } finally {
            setIsLoading(false);
        }
    };
    
    return (
        <div className="space-y-4">
            <p className="text-sm text-slate-400">Enter a description below to generate an image using AI.</p>
            <div className="flex gap-2">
                <input
                    type="text"
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    className="flex-grow w-full bg-zinc-950/70 p-2 rounded-md border border-white/10 focus:ring-2 focus:ring-cyan-400 focus:outline-none transition-shadow"
                    placeholder="e.g., A robot holding a skateboard"
                />
                <button
                    onClick={handleGenerate}
                    disabled={isLoading}
                    className="bg-cyan-500 hover:bg-cyan-400 text-slate-900 font-bold py-2 px-4 rounded-md transition-colors flex items-center justify-center gap-2 disabled:bg-slate-600 disabled:cursor-not-allowed"
                >
                    {isLoading ? (
                        <i className="fas fa-spinner fa-spin"></i>
                    ) : (
                       <i className="fas fa-magic"></i>
                    )}
                </button>
            </div>
            {error && <p className="text-sm text-center text-red-400">{error}</p>}
            
            <div className="w-full h-64 bg-zinc-950/70 rounded-lg flex items-center justify-center border border-white/10 overflow-hidden">
                {isLoading && (
                    <div className="text-center text-slate-400">
                        <i className="fas fa-spinner fa-spin text-3xl mb-2"></i>
                        <p>Generating image...</p>
                    </div>
                )}
                {!isLoading && generatedImage && (
                    <motion.img 
                        src={generatedImage} 
                        alt="Generated by AI" 
                        className="w-full h-full object-cover"
                        initial={{ opacity: 0, scale: 0.9 }}
                        animate={{ opacity: 1, scale: 1 }}
                    />
                )}
                 {!isLoading && !generatedImage && (
                     <div className="text-slate-500 text-center">
                        <i className="fas fa-image text-4xl mb-2"></i>
                        <p>Your generated image will appear here.</p>
                     </div>
                 )}
            </div>
        </div>
    );
};

export default ImageGenDemo;